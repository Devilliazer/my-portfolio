{"mappings":"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","sources":["src/game/script.js"],"sourcesContent":["// Отримуємо холст і контекст\r\nconst canvas = document.getElementById(\"gameCanvas\");\r\nconst ctx = canvas.getContext(\"2d\");\r\n\r\n// Встановлюємо розмір холста через CSS\r\ncanvas.style.width = \"100%\";\r\ncanvas.style.height = \"100%\";\r\ncanvas.width = window.innerWidth;\r\ncanvas.height = window.innerHeight;\r\n\r\n// Завантажуємо спрайт-лист\r\nconst sprites = new Image();\r\nsprites.src = \"assets/sprites.webp\";\r\nsprites.onerror = () => {\r\n  console.error(\"Не вдалося завантажити спрайт-лист.\");\r\n};\r\nsprites.onload = () => {\r\n  console.log(\"Спрайт-лист завантажено.\");\r\n  drawScene();\r\n  gameLoop();\r\n};\r\n\r\n// Позиція гравця\r\nconst playerPosition = {\r\n  x: 0, // Початок в координатах світу\r\n  y: 0,\r\n};\r\n\r\n// Поточне зміщення карти\r\nlet offsetX = 0;\r\nlet offsetY = 0;\r\n\r\n// Розмір тайла\r\nconst TILE_SIZE = 64;\r\nconst TILES_X = Math.ceil(canvas.width / TILE_SIZE);\r\nconst TILES_Y = Math.ceil(canvas.height / TILE_SIZE);\r\n\r\n// Двовимірний масив для збереження тайлів\r\nconst tileMap = {};\r\n\r\nfunction getTileKey(x, y) {\r\n  return `${x},${y}`;\r\n}\r\n\r\nfunction generateTileType() {\r\n  return Math.floor(Math.random() * 2); // 0 - трава, 1 - дерево\r\n}\r\n\r\nfunction getOrGenerateTile(x, y) {\r\n  const key = getTileKey(x, y);\r\n  if (!(key in tileMap)) {\r\n    tileMap[key] = generateTileType();\r\n  }\r\n  return tileMap[key];\r\n}\r\n\r\n// Генерація тайлів\r\nfunction drawTile(x, y, tileType) {\r\n  if (tileType === 0) {\r\n    // Малюємо траву\r\n    ctx.drawImage(\r\n      sprites,\r\n      500,\r\n      0,\r\n      210,\r\n      210,\r\n      x * TILE_SIZE - offsetX,\r\n      y * TILE_SIZE - offsetY,\r\n      TILE_SIZE,\r\n      TILE_SIZE\r\n    );\r\n  } else {\r\n    // Малюємо дерево\r\n    ctx.drawImage(\r\n      sprites,\r\n      200,\r\n      0,\r\n      210,\r\n      210,\r\n      x * TILE_SIZE - offsetX,\r\n      y * TILE_SIZE - offsetY,\r\n      TILE_SIZE,\r\n      TILE_SIZE\r\n    );\r\n  }\r\n}\r\n\r\n// Малюємо сцену\r\nfunction drawScene() {\r\n  // Очищаємо холст\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n  // Малюємо тайли\r\n  for (\r\n    let y = Math.floor(offsetY / TILE_SIZE);\r\n    y <= Math.floor(offsetY / TILE_SIZE) + TILES_Y;\r\n    y++\r\n  ) {\r\n    for (\r\n      let x = Math.floor(offsetX / TILE_SIZE);\r\n      x <= Math.floor(offsetX / TILE_SIZE) + TILES_X;\r\n      x++\r\n    ) {\r\n      const tileType = getOrGenerateTile(x, y);\r\n      drawTile(x, y, tileType);\r\n    }\r\n  }\r\n\r\n  // Малюємо персонажа в центрі екрану\r\n  ctx.drawImage(\r\n    sprites,\r\n    470,\r\n    370,\r\n    210,\r\n    210,\r\n    canvas.width / 2 - TILE_SIZE / 2,\r\n    canvas.height / 2 - TILE_SIZE / 2,\r\n    TILE_SIZE,\r\n    TILE_SIZE\r\n  );\r\n}\r\n\r\n// Логіка руху\r\nconst movement = {\r\n  w: false,\r\n  s: false,\r\n  a: false,\r\n  d: false,\r\n};\r\n\r\nfunction updatePlayerPosition() {\r\n  const speed = 10;\r\n  if (movement[\"w\"] === true) playerPosition.y -= speed;\r\n  if (movement[\"s\"] === true) playerPosition.y += speed;\r\n  if (movement[\"a\"] === true) playerPosition.x -= speed;\r\n  if (movement[\"d\"] === true) playerPosition.x += speed;\r\n\r\n  console.log(\"Позиція гравця:\", playerPosition);\r\n\r\n  // Оновлюємо зміщення карти\r\n  offsetX = playerPosition.x;\r\n  offsetY = playerPosition.y;\r\n  console.log(\"Зміщення карти:\", { offsetX, offsetY });\r\n\r\n  drawScene();\r\n}\r\n\r\n// Додаємо слухачі для клавіатури\r\nwindow.addEventListener(\"keydown\", (e) => {\r\n  console.log(\"Подія keydown спрацювала\", e.key);\r\n  const key = e.key.toLowerCase();\r\n  if (key in movement) {\r\n    movement[key] = true;\r\n    console.log(`Клавіша натиснута: ${key}`);\r\n  }\r\n});\r\n\r\nwindow.addEventListener(\"keyup\", (e) => {\r\n  console.log(\"Подія keyup спрацювала\", e.key);\r\n  const key = e.key.toLowerCase();\r\n  if (key in movement) {\r\n    movement[key] = false;\r\n    console.log(`Клавіша відпущена: ${key}`);\r\n  }\r\n});\r\n\r\n// Слухачі для джойстика\r\nconst joystick = document.getElementById(\"joystick\");\r\nconst stick = document.getElementById(\"stick\");\r\n\r\nif (!joystick || !stick) {\r\n  console.error(\"Елементи джойстика не знайдено!\");\r\n} else {\r\n  let isDragging = false;\r\n  let centerX = joystick.offsetWidth / 2;\r\n  let centerY = joystick.offsetHeight / 2;\r\n\r\n  stick.addEventListener(\"mousedown\", (e) => {\r\n    isDragging = true;\r\n  });\r\n\r\n  window.addEventListener(\"mousemove\", (e) => {\r\n    if (isDragging) {\r\n      const rect = joystick.getBoundingClientRect();\r\n      const x = e.clientX - rect.left - centerX;\r\n      const y = e.clientY - rect.top - centerY;\r\n      const distance = Math.sqrt(x * x + y * y);\r\n      const maxDistance = joystick.offsetWidth / 2 - stick.offsetWidth / 2;\r\n\r\n      if (distance > maxDistance) {\r\n        const angle = Math.atan2(y, x);\r\n        stick.style.left = `${\r\n          Math.cos(angle) * maxDistance + centerX - stick.offsetWidth / 2\r\n        }px`;\r\n        stick.style.top = `${\r\n          Math.sin(angle) * maxDistance + centerY - stick.offsetHeight / 2\r\n        }px`;\r\n      } else {\r\n        stick.style.left = `${x + centerX - stick.offsetWidth / 2}px`;\r\n        stick.style.top = `${y + centerY - stick.offsetHeight / 2}px`;\r\n      }\r\n\r\n      // Оновлення руху\r\n      movement[\"w\"] = y < -maxDistance * 0.5;\r\n      movement[\"s\"] = y > maxDistance * 0.5;\r\n      movement[\"a\"] = x < -maxDistance * 0.5;\r\n      movement[\"d\"] = x > maxDistance * 0.5;\r\n    }\r\n  });\r\n\r\n  window.addEventListener(\"mouseup\", () => {\r\n    isDragging = false;\r\n    stick.style.left = `${centerX - stick.offsetWidth / 2}px`;\r\n    stick.style.top = `${centerY - stick.offsetHeight / 2}px`;\r\n    movement[\"w\"] = false;\r\n    movement[\"s\"] = false;\r\n    movement[\"a\"] = false;\r\n    movement[\"d\"] = false;\r\n  });\r\n}\r\n\r\n// Постійне оновлення сцени\r\nfunction gameLoop() {\r\n  updatePlayerPosition();\r\n  requestAnimationFrame(gameLoop);\r\n}\r\n"],"names":[],"version":3,"file":"index.3c1ba0df.js.map","sourceRoot":"/__parcel_source_root/"}