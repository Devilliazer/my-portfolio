{"mappings":"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","sources":["<anon>","src/game/script.js"],"sourcesContent":["// Отримуємо холст і контекст\nconst canvas = document.getElementById(\"gameCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Встановлюємо розмір холста\ncanvas.style.width = \"100%\";\ncanvas.style.height = \"100%\";\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n// Завантажуємо спрайт-лист\nconst sprites = new Image();\nsprites.src = \"assets/sprites.webp\";\nsprites.onerror = ()=>{\n    console.error(\"\\u041D\\u0435 \\u0432\\u0434\\u0430\\u043B\\u043E\\u0441\\u044F \\u0437\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0438\\u0442\\u0438 \\u0441\\u043F\\u0440\\u0430\\u0439\\u0442-\\u043B\\u0438\\u0441\\u0442.\");\n};\nsprites.onload = ()=>{\n    console.log(\"\\u0421\\u043F\\u0440\\u0430\\u0439\\u0442-\\u043B\\u0438\\u0441\\u0442 \\u0437\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043E.\");\n    drawScene();\n    gameLoop();\n};\n// Позиція гравця\nconst playerPosition = {\n    x: 0,\n    y: 0\n};\n// Поточне зміщення карти\nlet offsetX = 0;\nlet offsetY = 0;\n// Розмір тайла\nconst TILE_SIZE = 64;\nconst TILES_X = Math.ceil(canvas.width / TILE_SIZE);\nconst TILES_Y = Math.ceil(canvas.height / TILE_SIZE);\n// Двовимірний масив для збереження тайлів\nconst tileMap = {};\nfunction getTileKey(x, y) {\n    return `${x},${y}`;\n}\nfunction generateTileType() {\n    return Math.floor(Math.random() * 2); // 0 - трава, 1 - дерево\n}\nfunction getOrGenerateTile(x, y) {\n    const key = getTileKey(x, y);\n    if (!(key in tileMap)) tileMap[key] = generateTileType();\n    return tileMap[key];\n}\n// Генерація тайлів\nfunction drawTile(x, y, tileType) {\n    if (tileType === 0) // Малюємо траву\n    ctx.drawImage(sprites, 500, 0, 210, 210, x * TILE_SIZE - offsetX, y * TILE_SIZE - offsetY, TILE_SIZE, TILE_SIZE);\n    else // Малюємо дерево\n    ctx.drawImage(sprites, 200, 0, 210, 210, x * TILE_SIZE - offsetX, y * TILE_SIZE - offsetY, TILE_SIZE, TILE_SIZE);\n}\n// Малюємо сцену\nfunction drawScene() {\n    // Очищаємо холст\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    // Малюємо тайли\n    for(let y = Math.floor(offsetY / TILE_SIZE); y <= Math.floor(offsetY / TILE_SIZE) + TILES_Y; y++)for(let x = Math.floor(offsetX / TILE_SIZE); x <= Math.floor(offsetX / TILE_SIZE) + TILES_X; x++){\n        const tileType = getOrGenerateTile(x, y);\n        drawTile(x, y, tileType);\n    }\n    function drawGrid() {\n        ctx.strokeStyle = \"rgba(255, 0, 0, 0.5)\";\n        for(let x = 0; x < canvas.width; x += TILE_SIZE){\n            ctx.beginPath();\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, canvas.height);\n            ctx.stroke();\n        }\n        for(let y = 0; y < canvas.height; y += TILE_SIZE){\n            ctx.beginPath();\n            ctx.moveTo(0, y);\n            ctx.lineTo(canvas.width, y);\n            ctx.stroke();\n        }\n    }\n    // Малюємо персонажа в центрі екрану\n    ctx.drawImage(sprites, 470, 370, 210, 210, canvas.width / 2 - TILE_SIZE / 2, canvas.height / 2 - TILE_SIZE / 2, TILE_SIZE, TILE_SIZE);\n}\n// Логіка руху\nconst movement = {\n    w: false,\n    s: false,\n    a: false,\n    d: false\n};\nfunction updatePlayerPosition() {\n    const speed = 10;\n    if (movement[\"w\"] === true) playerPosition.y -= speed;\n    if (movement[\"s\"] === true) playerPosition.y += speed;\n    if (movement[\"a\"] === true) playerPosition.x -= speed;\n    if (movement[\"d\"] === true) playerPosition.x += speed;\n    //console.log(\"Позиція гравця:\", playerPosition);\n    // Оновлюємо зміщення карти\n    offsetX = playerPosition.x - canvas.width / 2 + TILE_SIZE / 2;\n    offsetY = playerPosition.y - canvas.height / 2 + TILE_SIZE / 2;\n    //console.log(\"Зміщення карти:\", { offsetX, offsetY });\n    drawScene();\n}\n// Додаємо слухачі для клавіатури\nwindow.addEventListener(\"keyup\", (e)=>{\n    console.log(\"\\u041F\\u043E\\u0434\\u0456\\u044F keyup \\u0441\\u043F\\u0440\\u0430\\u0446\\u044E\\u0432\\u0430\\u043B\\u0430\", e.key);\n    const key = e.key.toLowerCase();\n    if (key in movement) {\n        movement[key] = false;\n        console.log(`\\u{41A}\\u{43B}\\u{430}\\u{432}\\u{456}\\u{448}\\u{430} \\u{432}\\u{456}\\u{434}\\u{43F}\\u{443}\\u{449}\\u{435}\\u{43D}\\u{430}: ${key}`);\n    }\n});\nwindow.addEventListener(\"keydown\", (e)=>{\n    console.log(\"\\u041F\\u043E\\u0434\\u0456\\u044F keydown \\u0441\\u043F\\u0440\\u0430\\u0446\\u044E\\u0432\\u0430\\u043B\\u0430\", e.key);\n    const key = e.key.toLowerCase();\n    if (key in movement) {\n        movement[key] = true;\n        console.log(`\\u{41A}\\u{43B}\\u{430}\\u{432}\\u{456}\\u{448}\\u{430} \\u{43D}\\u{430}\\u{442}\\u{438}\\u{441}\\u{43D}\\u{443}\\u{442}\\u{430}: ${key}`);\n    }\n});\nwindow.addEventListener(\"keydown\", (e)=>{\n    if ([\n        \"w\",\n        \"a\",\n        \"s\",\n        \"d\"\n    ].includes(e.key.toLowerCase())) {\n        e.preventDefault();\n        movement[e.key.toLowerCase()] = true;\n    }\n});\n// Слухачі для джойстика\nconst joystick = document.getElementById(\"joystick\");\nconst stick = document.getElementById(\"stick\");\nif (!joystick || !stick) console.error(\"\\u0415\\u043B\\u0435\\u043C\\u0435\\u043D\\u0442\\u0438 \\u0434\\u0436\\u043E\\u0439\\u0441\\u0442\\u0438\\u043A\\u0430 \\u043D\\u0435 \\u0437\\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E!\");\nelse {\n    let isDragging = false;\n    let centerX = joystick.offsetWidth / 2;\n    let centerY = joystick.offsetHeight / 2;\n    stick.addEventListener(\"mousedown\", (e)=>{\n        isDragging = true;\n    });\n    window.addEventListener(\"mousemove\", (e)=>{\n        if (isDragging) {\n            const rect = joystick.getBoundingClientRect();\n            const x = e.clientX - rect.left - centerX;\n            const y = e.clientY - rect.top - centerY;\n            const distance = Math.sqrt(x * x + y * y);\n            const maxDistance = joystick.offsetWidth / 2 - stick.offsetWidth / 2;\n            if (distance > maxDistance) {\n                const angle = Math.atan2(y, x);\n                stick.style.left = `${Math.cos(angle) * maxDistance + centerX - stick.offsetWidth / 2}px`;\n                stick.style.top = `${Math.sin(angle) * maxDistance + centerY - stick.offsetHeight / 2}px`;\n            } else {\n                stick.style.left = `${x + centerX - stick.offsetWidth / 2}px`;\n                stick.style.top = `${y + centerY - stick.offsetHeight / 2}px`;\n            }\n            // Оновлення руху\n            movement[\"w\"] = y < -maxDistance * 0.5;\n            movement[\"s\"] = y > maxDistance * 0.5;\n            movement[\"a\"] = x < -maxDistance * 0.5;\n            movement[\"d\"] = x > maxDistance * 0.5;\n        }\n    });\n    window.addEventListener(\"mouseup\", ()=>{\n        isDragging = false;\n        stick.style.left = `${centerX - stick.offsetWidth / 2}px`;\n        stick.style.top = `${centerY - stick.offsetHeight / 2}px`;\n        movement[\"w\"] = false;\n        movement[\"s\"] = false;\n        movement[\"a\"] = false;\n        movement[\"d\"] = false;\n    });\n}\n// Постійне оновлення сцени та контроль фпс\nlet lastTime = 0;\nfunction gameLoop(timestamp) {\n    const deltaTime = timestamp - lastTime;\n    if (deltaTime > 1000 / 144) {\n        updatePlayerPosition();\n        lastTime = timestamp;\n    }\n    requestAnimationFrame(gameLoop);\n}\n// Розміри екрану \nfunction resizeCanvas() {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    drawScene();\n}\nwindow.addEventListener(\"resize\", resizeCanvas);\nresizeCanvas();\nwindow.addEventListener(\"orientationchange\", resizeCanvas);\n\n//# sourceMappingURL=index.d6cd483d.js.map\n","// Отримуємо холст і контекст\r\nconst canvas = document.getElementById(\"gameCanvas\");\r\nconst ctx = canvas.getContext(\"2d\");\r\n\r\n// Встановлюємо розмір холста\r\ncanvas.style.width = \"100%\";\r\ncanvas.style.height = \"100%\";\r\ncanvas.width = window.innerWidth;\r\ncanvas.height = window.innerHeight;\r\n\r\n// Завантажуємо спрайт-лист\r\nconst sprites = new Image();\r\nsprites.src = \"assets/sprites.webp\";\r\nsprites.onerror = () => {\r\n  console.error(\"Не вдалося завантажити спрайт-лист.\");\r\n};\r\nsprites.onload = () => {\r\n  console.log(\"Спрайт-лист завантажено.\");\r\n  drawScene();\r\n  gameLoop();\r\n};\r\n\r\n// Позиція гравця\r\nconst playerPosition = {\r\n  x: 0, // Початок в координатах світу\r\n  y: 0,\r\n};\r\n\r\n// Поточне зміщення карти\r\nlet offsetX = 0;\r\nlet offsetY = 0;\r\n\r\n// Розмір тайла\r\nconst TILE_SIZE = 64;\r\nconst TILES_X = Math.ceil(canvas.width / TILE_SIZE);\r\nconst TILES_Y = Math.ceil(canvas.height / TILE_SIZE);\r\n\r\n// Двовимірний масив для збереження тайлів\r\nconst tileMap = {};\r\n\r\nfunction getTileKey(x, y) {\r\n  return `${x},${y}`;\r\n}\r\n\r\nfunction generateTileType() {\r\n  return Math.floor(Math.random() * 2); // 0 - трава, 1 - дерево\r\n}\r\n\r\nfunction getOrGenerateTile(x, y) {\r\n  const key = getTileKey(x, y);\r\n  if (!(key in tileMap)) {\r\n    tileMap[key] = generateTileType();\r\n  }\r\n  return tileMap[key];\r\n}\r\n\r\n// Генерація тайлів\r\nfunction drawTile(x, y, tileType) {\r\n  if (tileType === 0) {\r\n    // Малюємо траву\r\n    ctx.drawImage(\r\n      sprites,\r\n      500,\r\n      0,\r\n      210,\r\n      210,\r\n      x * TILE_SIZE - offsetX,\r\n      y * TILE_SIZE - offsetY,\r\n      TILE_SIZE,\r\n      TILE_SIZE\r\n    );\r\n  } else {\r\n    // Малюємо дерево\r\n    ctx.drawImage(\r\n      sprites,\r\n      200,\r\n      0,\r\n      210,\r\n      210,\r\n      x * TILE_SIZE - offsetX,\r\n      y * TILE_SIZE - offsetY,\r\n      TILE_SIZE,\r\n      TILE_SIZE\r\n    );\r\n  }\r\n}\r\n\r\n// Малюємо сцену\r\nfunction drawScene() {\r\n  // Очищаємо холст\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n  // Малюємо тайли\r\n  for (\r\n    let y = Math.floor(offsetY / TILE_SIZE);\r\n    y <= Math.floor(offsetY / TILE_SIZE) + TILES_Y;\r\n    y++\r\n  ) {\r\n    for (\r\n      let x = Math.floor(offsetX / TILE_SIZE);\r\n      x <= Math.floor(offsetX / TILE_SIZE) + TILES_X;\r\n      x++\r\n    ) {\r\n      const tileType = getOrGenerateTile(x, y);\r\n      drawTile(x, y, tileType);\r\n    }\r\n  }\r\n\r\n  function drawGrid() {\r\n    ctx.strokeStyle = \"rgba(255, 0, 0, 0.5)\";\r\n    for (let x = 0; x < canvas.width; x += TILE_SIZE) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, 0);\r\n        ctx.lineTo(x, canvas.height);\r\n        ctx.stroke();\r\n    }\r\n    for (let y = 0; y < canvas.height; y += TILE_SIZE) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y);\r\n        ctx.lineTo(canvas.width, y);\r\n        ctx.stroke();\r\n    }\r\n  }\r\n  \r\n  // Малюємо персонажа в центрі екрану\r\n  ctx.drawImage(\r\n    sprites,\r\n    470,\r\n    370,\r\n    210,\r\n    210,\r\n    canvas.width / 2 - TILE_SIZE / 2,\r\n    canvas.height / 2 - TILE_SIZE / 2,\r\n    TILE_SIZE,\r\n    TILE_SIZE\r\n  );\r\n}\r\n\r\n\r\n// Логіка руху\r\nconst movement = {\r\n  w: false,\r\n  s: false,\r\n  a: false,\r\n  d: false,\r\n};\r\nfunction updatePlayerPosition() {\r\n  const speed = 10;\r\n  if (movement[\"w\"] === true) playerPosition.y -= speed;\r\n  if (movement[\"s\"] === true) playerPosition.y += speed;\r\n  if (movement[\"a\"] === true) playerPosition.x -= speed;\r\n  if (movement[\"d\"] === true) playerPosition.x += speed;\r\n  //console.log(\"Позиція гравця:\", playerPosition);\r\n\r\n  // Оновлюємо зміщення карти\r\n  offsetX = playerPosition.x - canvas.width / 2 + TILE_SIZE / 2;\r\n  offsetY = playerPosition.y - canvas.height / 2 + TILE_SIZE / 2;\r\n  //console.log(\"Зміщення карти:\", { offsetX, offsetY });\r\n\r\n  drawScene();\r\n}\r\n\r\n// Додаємо слухачі для клавіатури\r\nwindow.addEventListener(\"keyup\", (e) => {\r\n  console.log(\"Подія keyup спрацювала\", e.key);\r\n  const key = e.key.toLowerCase();\r\n  if (key in movement) {\r\n    movement[key] = false;\r\n    console.log(`Клавіша відпущена: ${key}`);\r\n  }\r\n});\r\n\r\nwindow.addEventListener(\"keydown\", (e) => {\r\n  console.log(\"Подія keydown спрацювала\", e.key);\r\n  const key = e.key.toLowerCase();\r\n  if (key in movement) {\r\n    movement[key] = true;\r\n    console.log(`Клавіша натиснута: ${key}`);\r\n  }\r\n});\r\nwindow.addEventListener(\"keydown\", (e) => {\r\n  if ([\"w\", \"a\", \"s\", \"d\"].includes(e.key.toLowerCase())) {\r\n    e.preventDefault();\r\n    movement[e.key.toLowerCase()] = true;\r\n  }\r\n});\r\n// Слухачі для джойстика\r\nconst joystick = document.getElementById(\"joystick\");\r\nconst stick = document.getElementById(\"stick\");\r\n\r\nif (!joystick || !stick) {\r\n  console.error(\"Елементи джойстика не знайдено!\");\r\n} else {\r\n  let isDragging = false;\r\n  let centerX = joystick.offsetWidth / 2;\r\n  let centerY = joystick.offsetHeight / 2;\r\n\r\n  stick.addEventListener(\"mousedown\", (e) => {\r\n    isDragging = true;\r\n  });\r\n\r\n  window.addEventListener(\"mousemove\", (e) => {\r\n    if (isDragging) {\r\n      const rect = joystick.getBoundingClientRect();\r\n      const x = e.clientX - rect.left - centerX;\r\n      const y = e.clientY - rect.top - centerY;\r\n      const distance = Math.sqrt(x * x + y * y);\r\n      const maxDistance = joystick.offsetWidth / 2 - stick.offsetWidth / 2;\r\n\r\n      if (distance > maxDistance) {\r\n        const angle = Math.atan2(y, x);\r\n        stick.style.left = `${\r\n          Math.cos(angle) * maxDistance + centerX - stick.offsetWidth / 2\r\n        }px`;\r\n        stick.style.top = `${\r\n          Math.sin(angle) * maxDistance + centerY - stick.offsetHeight / 2\r\n        }px`;\r\n      } else {\r\n        stick.style.left = `${x + centerX - stick.offsetWidth / 2}px`;\r\n        stick.style.top = `${y + centerY - stick.offsetHeight / 2}px`;\r\n      }\r\n\r\n      // Оновлення руху\r\n      movement[\"w\"] = y < -maxDistance * 0.5;\r\n      movement[\"s\"] = y > maxDistance * 0.5;\r\n      movement[\"a\"] = x < -maxDistance * 0.5;\r\n      movement[\"d\"] = x > maxDistance * 0.5;\r\n    }\r\n  });\r\n  window.addEventListener(\"mouseup\", () => {\r\n    isDragging = false;\r\n    stick.style.left = `${centerX - stick.offsetWidth / 2}px`;\r\n    stick.style.top = `${centerY - stick.offsetHeight / 2}px`;\r\n    movement[\"w\"] = false;\r\n    movement[\"s\"] = false;\r\n    movement[\"a\"] = false;\r\n    movement[\"d\"] = false;\r\n  });\r\n}\r\n// Постійне оновлення сцени та контроль фпс\r\nlet lastTime = 0;\r\nfunction gameLoop(timestamp) {\r\n  const deltaTime = timestamp - lastTime;\r\n  if (deltaTime > 1000 / 144) {  // 144 FPS\r\n    updatePlayerPosition();\r\n    lastTime = timestamp;\r\n  }\r\n  requestAnimationFrame(gameLoop);\r\n}\r\n\r\n// Розміри екрану \r\nfunction resizeCanvas() {\r\n  canvas.width = window.innerWidth;\r\n  canvas.height = window.innerHeight;\r\n  drawScene();\r\n}\r\nwindow.addEventListener(\"resize\", resizeCanvas);\r\nresizeCanvas();\r\nwindow.addEventListener(\"orientationchange\", resizeCanvas);\r\n\r\n"],"names":["canvas","document","getElementById","ctx","getContext","style","width","height","window","innerWidth","innerHeight","sprites","Image","src","onerror","console","error","onload","log","drawScene","gameLoop","timestamp","lastTime","movement","playerPosition","y","x","offsetX","TILE_SIZE","offsetY","requestAnimationFrame","TILES_X","Math","ceil","TILES_Y","tileMap","clearRect","floor","tileType","getOrGenerateTile","key","random","drawImage","w","s","a","d","addEventListener","e","toLowerCase","includes","preventDefault","joystick","stick","isDragging","centerX","offsetWidth","centerY","offsetHeight","rect","getBoundingClientRect","clientX","left","clientY","top","distance","sqrt","maxDistance","angle","atan2","cos","sin","resizeCanvas"],"version":3,"file":"index.d6cd483d.js.map"}